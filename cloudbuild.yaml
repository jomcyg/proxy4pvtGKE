
steps:
- id: generate certificate
  name: gcr.io/binx-io-public/simple-iap-proxy:0.5.2
  args: [
    "generate-certificate",
    "--key-file", "server.key",
    "--certificate-file", "server.crt",
    "--dns-name", "simple-iap-proxy"
  ]
- id: start simple-iap-proxy
  name: gcr.io/cloud-builders/docker
  secretEnv:
    - AUDIENCE
    - TARGET_URL
    - SERVICE_ACCOUNT
  entrypoint: /bin/sh
  args:
    - -c
    - >
      docker run -d --rm -v /workspace:/workspace -w /workspace
      --network cloudbuild --name simple-iap-proxy
      gcr.io/binx-io-public/simple-iap-proxy:0.5.2 client
      --to-gke
      --port 8080
      --target-url $$TARGET_URL
      --iap-audience $$AUDIENCE
      --service-account $$SERVICE_ACCOUNT
      --use-default-credentials
      --key-file server.key
      --certificate-file server.crt &&
       sleep 2
- id: get credentials for cluster
  name: gcr.io/cloud-builders/gcloud
  entrypoint: gcloud
  args: [
      "container", "clusters",
      "get-credentials", "jmc-autopilot-demo",
      "--internal-ip",
      "--region", "asia-south1"
  ]

- id: setup kubectl to use proxy
  name: gcr.io/cloud-builders/kubectl
  entrypoint: /bin/sh
  args:
    - -c
    - context_name=$(kubectl config current-context) &&
      kubectl config set clusters.$context_name.certificate-authority-data "$(base64 < server.crt)" &&
      kubectl config set clusters.$context_name.proxy-url https://localhost:8080 &&
      #kubectl config set clusters.$context_name.proxy-url https://simple-iap-proxy:8080 &&
      kubectl cluster-info

availableSecrets:
  secretManager:
    - env: AUDIENCE
      versionName: projects/jmc-devsecops/secrets/simple-iap-proxy-audience/versions/latest
    - env: SERVICE_ACCOUNT
      versionName: projects/jmc-devsecops/secrets/simple-iap-proxy-service-account/versions/latest
    - env: TARGET_URL
      versionName: projects/jmc-devsecops/secrets/simple-iap-proxy-target-url/versions/latest


